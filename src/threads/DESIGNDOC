			+--------------------+
			|        CS 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Uday Chadha  <uchadha@usc.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

Some tests are not passing. If possible, please look at their outputs and provide
with partial credit if justified.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.
Referred to these slides as well.
http://web.stanford.edu/class/archive/cs/cs140/cs140.1088/misc/project1-sum08.pdf

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

(timer.c) static struc sleeping_list - It is a list of all the threads that are sleeping.
(thread.h) int_64_t sleep_for_ticks - Used to store the ticks until the thread will sleep.


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

-there is a check to see if the ticks are valid i.e > 0.
-sleep_for_ticks is determined by adding number of ticks it should sleep for to OS ticks
-adds the current thread to the sleeping_list. The list is kept in sorted order of ticks.
-thread is blocked


>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

-the list of sleeping threads is kept in a sorted order of ticks. Therefore, the interrupt handler doe not have to spend too much time in finding the next thread to wake up.
---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
-Whenever we travel across the data structures that are declared for this function, the interrupts are turned off which translates to no race conditions during read/write.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
Interrupts are disabled right after we check for the valid number of ticks. This makes sure that there are no race conditions between timer_sleep and timer_interrupt.


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
I initially thought of this design. I just made one modification while coding, which was that I kept the sleeping_list sorted using threads. I did this after conferring it with professor Shindler.


			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
(thread.h)
		- int initial_priority: base priority without donation
		- struct lock* wait_on: The lock the the thread is waiting on
		- struct acquired_locks: The locks that the thread has acquired



>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

A, B, C are locks
H1, H2, M, L are threads

    A
H1 ---> 
    
	B      C
H2 ---> M ---> L
    

M's donation list: H1, H2
L's donation list: M

M's wait on lock: C
L's wait on lock: NULL

M's current donated priority is max(H1, H2, M).
L's current donated priority is max(L, M).

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?
- the waiting list of the lock is ordered based on priority therefore it wakes up first..

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?
- First we check if the lock is held by some other thread and if so then then this thread is added to the waiting list. Nested donation is handled in a while loop which runs until the max depth is reached or until the thread priority > max_priority of the lock.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.
- The lock holder is changed to NULL value.
- It then calls sema_up.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?
A potential race condition can occur while tryint to set the priority for the thread. If another thread is donated AFTER the max priority from the previous donation was already calculated. We avoid this race condition by disabling interupts.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
I tried to be economincal with the number of new variables that I added. So firstly, I replaced the push_back commands with list_insert_ordered() commands since it made it easier to keep track of the priorities without much hassle. I did not consider other designs but I think I should have since not being able to run all the test cases is not the optimal result.

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run    ready list
-----  --  --  --  --  --  --   ------    ----------
 0     
 4     
 8     
12     
16     
20     
24     
28     
32     
36    

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
